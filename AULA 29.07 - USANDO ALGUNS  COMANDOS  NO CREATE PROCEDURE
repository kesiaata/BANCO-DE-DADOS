USE escola;
--Criar uma SP para mostrar fone e email de todos os professores.
CREATE PROCEDURE spMostraFoneEmailProfessores AS
SELECT fone, email FROM tab_professores;

EXECUTE spMostraFoneEmailProfessores;

SELECT *FROM tab_professores;

UPDATE tab_professores SET salario = 1500.00 WHERE id_professor = 1;
UPDATE tab_professores SET salario = 1500.00 WHERE id_professor = 2;
UPDATE tab_professores SET salario = 2500.00 WHERE id_professor = 3;
UPDATE tab_professores SET salario = 2380.00 WHERE id_professor = 4;


--Criar um SP para aumentar o salario de todos os professores com qualquer porcentagem.
CREATE PROCEDURE spAumentsalarioprof
@valor DECIMAL(10,2) AS
UPDATE tab_professores SET salario = salario*@valor;

SELECT *FROM tab_professores;
EXECUTE spAumentsalarioprof 1.10;
SELECT *FROM tab_professores;


--Criar uma Sp para aumentar o salario de um professor específico com qualquer porcentagem.
CREATE PROCEDURE spAumentoUnicoProfessor 
@aumento DECIMAL(10,2), @ID INT  AS
UPDATE tab_professores SET salario = salario*@aumento WHERE id_professor = @ID;

SELECT *FROM tab_professores;
EXECUTE spAumentoUnicoProfessor 1.10, 1;
SELECT *FROM tab_professores;


--Criar uma SP para mostrar a soma de todos os salários dos professores.
CREATE PROCEDURE spSomaSalarios AS
SELECT SUM(salario) AS 'Soma dos salários' FROM tab_professores;

EXECUTE spSomaSalarios ;


--Criar uma SP para contar quantos alunos existem em uma determinada turma.
CREATE PROCEDURE spContaTurma
@nome VARCHAR(50) AS
SELECT COUNT(id_aluno)  AS 'Quant. Aluno' FROM tab_turmas WHERE nome = @nome;

EXECUTE spContaTurma 'SQL';


--Criar uma SP para inseris alunos
CREATE PROCEDURE spInserindoAlunos 
@nome VARCHAR(50), @email VARCHAR(50), @fone VARCHAR(15), @foto VARCHAR(50) AS
INSERT INTO tab_alunos(nome, email, fone, foto) VALUES (@nome, @email, @fone, @foto);

SELECT *FROM tab_alunos;
EXECUTE spInserindoAlunos 'Zeca', 'zeca@gmail.com', '(11) 91212-1212', 'zeca.jpg';
SELECT *FROM tab_alunos;

--Criar uma SP para alterar dados de um aluno.
CREATE PROCEDURE spAtualizandoAluno
@nome VARCHAR(50), @email VARCHAR(50), @fone VARCHAR(15), @foto VARCHAR(50), @ID INT AS
UPDATE tab_alunos SET nome = @nome, email = @email, fone = @fone, foto = @foto WHERE id_aluno = @ID;

SELECT *FROM tab_alunos;
EXECUTE spAtualizandoAluno 'Zeca Pacodinho', 'zeca@gmail.com', '(11) 91212-1212', 'zeca.jpg', 11;
SELECT *FROM tab_alunos;


--Alterar a SP spMostraFoneEmailProfessores para mostrar tb o nome do professor.
ALTER PROCEDURE spMostraFoneEmailProfessores AS
SELECT nome, fone, email FROM tab_professores;

EXECUTE spMostraFoneEmailProfessores;


------------------------------------------------------------------------------------------------------------------------------------

--Trigger é como uma função que é disparada mediante alguma ação. Geralmente essas ações que disparam os triggers são 
--alterações nas tabelas por meio de operações de inserção, exclusão e atualização de dados(INSERT, DELETE, UPDATE).

--Vamos a um exemplo prático, criaremos um controle de fluxo de caixa de uma loja, onde a cada venda inserida na tabela 
--de caixa, o mesmo acontecerá quando removermos a venda.

CREATE DATABASE fluxocaixa;
USE fluxocaixa;

CREATE TABLE tab_caixa(
	id_caixa INT NOT NULL PRIMARY KEY IDENTITY,
	data DATE NOT NULL,
	saldo_inicial DECIMAL(10,2) NOT NULL,
	saldo_final DECIMAL(10,2) NOT NULL
);
CREATE TABLE tab_vendas(
	id_venda INT NOT NULL PRIMARY KEY IDENTITY,
	data DATE NOT NULL,
	valor DECIMAL(10,2) NOT NULL
);
INSERT INTO tab_caixa(data, saldo_inicial, saldo_final) VALUES
('2022-08-02', 100, 100);
