USE pessoas;
-- Mostre o total de pessoas cadastradas (COUNT()) SELECT COUNT(nome) AS 'Total de pessoas' FROM tab_pessoas;

-- Mostre o total de pessoas por estado, do maior para o menor
SELECT COUNT(id_pessoa) AS 'Total', estado FROM tab_pessoas GROUP BY estado ORDER BY 'Total' DESC;

-- Mostre o peso da pessoa mais leve (MIN())
SELECT MIN(peso) AS 'Pessoa mais leve' FROM tab_pessoas;

-- Mostre o peso da pessoa mais pesada (MAX())
SELECT MAX(peso) AS 'Pessoa mais pesada' FROM tab_pessoas;

-- Mostre a altura da pessoa mais alta
SELECT MAX(altura) AS 'Pessoa mais alta' FROM tab_pessoas;

-- Mostre a altura da pessoa mais baixa
SELECT MIN(altura) AS 'Pessoa mais baixa' FROM tab_pessoas;

-- Mostre a soma de todos os pesos
SELECT SUM(peso) AS 'Soma de todos os pesos' FROM tab_pessoas;

-- Mostre a soma de todas as alturas
SELECT SUM(altura) AS 'Soma de todos as alturas' FROM tab_pessoas;

-- Mostre a média dos pesos (AVG())
SELECT AVG(peso) AS 'Média dos pesos' FROM tab_pessoas;

-- Mostre todos os estados sem repetir em ordem alfabética
SELECT DISTINCT estado FROM tab_pessoas ORDER BY estado;

-- Mostre o nome e estado de todas as pessoas de são paulo
SELECT nome, estado FROM tab_pessoas WHERE estado = 'SP';

-- Mostre o nome e estado de todas as pessoas de são paulo e minas gerais em ordem por estado SELECT nome, estado FROM tab_pessoas
WHERE estado = 'SP' OR estado = 'MG' ORDER BY estado;

-- Mostre o nome, estado e a altura de todas as pessoas de são paulo e com 1.68 de altura
SELECT nome, estado, altura FROM tab_pessoas WHERE estado = 'SP' AND altura = 1.68;

-- Mostre o nome, estado e a altura de todas as pessoas de são paulo ou com 1.78 de altura
SELECT nome, estado, altura FROM tab_pessoas WHERE estado = 'SP' OR altura = 1.78;

-- Mostre o nome, estado e o peso de todas as pessoas de são paulo com 80 kilos
SELECT  nome, estado, peso FROM tab_pessoas WHERE estado = 'SP' AND peso = 80;

-- Mostre o nome e o estado de todas as pessoas que não são de são paulo (use duas formas diferentes)
SELECT nome , estado FROM tab_pessoas WHERE NOT estado = 'SP';

SELECT nome , estado FROM tab_pessoas WHERE estado <> 'SP';



-- ***********************************************************************************************

CREATE DATABASE compras;
USE compras;
CREATE TABLE tab_clientes(
	id_cliente INT NOT NULL PRIMARY KEY IDENTITY,
	nome VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL,
	cpf VARCHAR(14) NOT NULL
);
CREATE TABLE tab_produtos(
	id_produto INT NOT NULL PRIMARY KEY IDENTITY,
	nome VARCHAR(50) NOT NULL,
	preco DECIMAL(10,2) NOT NULL
);
CREATE TABLE tab_pedidos(
	id_pedido INT NOT NULL PRIMARY KEY IDENTITY,
	id_cliente INT NOT NULL,
	data DATE NOT NULL,
	total DECIMAL(10,2) NULL,
	CONSTRAINT fk_id_cliente FOREIGN KEY(id_cliente)
	REFERENCES tab_clientes(id_cliente)
);
CREATE TABLE tab_itens_pedido(
	id_item INT NOT NULL PRIMARY KEY IDENTITY,
	id_pedido INT NOT NULL,
	id_produto INT NOT NULL,
	qtde INT NOT NULL,
	subtotal DECIMAL(10,2) NOT NULL
	CONSTRAINT fk_id_pedido FOREIGN KEY (id_pedido)
	REFERENCES tab_pedidos(id_pedido),
	CONSTRAINT fk_id_produto FOREIGN KEY (id_produto)
	REFERENCES tab_produtos(id_produto)
);
-- Insira 2 registros na tab_clientes
INSERT INTO tab_clientes(nome, email, cpf) VALUES
('João', 'joao@gmail.com', '111.111.111-11'),
('Maria', 'maria@outlook.com', '222.222.222-22');

-- Insira 10 registros na tab_produtos
INSERT INTO tab_produtos(nome, preco) VALUES
('Feijão', 6.00), ('Arroz', 9.00),
('Macarrão', 6.50), ('Tomate', 5.50),
('Alface', 3.00), ('Farinha de rosca', 4.30),
('Sucrilhos', 12.00), ('Requeijão', 6.00),
('Manteiga', 12.00), ('Guardanapo', 1.00);

-- Insira um pedido para cada cliente (com a mesma data de compra)
INSERT INTO tab_pedidos(id_cliente, data) VALUES
(1, '2022-06-21'),
(2, '2022-06-21');

-- Insira 5 registros na tab_itens_pedido para cada pedido
INSERT INTO tab_itens_pedido(id_pedido, id_produto, qtde, subtotal) VALUES
(1, 1, 2, 12.00), (1, 2, 1, 9.00),
(1, 3, 3, 19.50), (1, 4, 1, 5.50),
(1, 5, 2, 6.00),

(2, 1, 1, 6.00), (2, 2, 1, 9.00),
(2, 6, 1, 4.30), (2, 7, 1, 12.00),
(2, 9, 1, 12.00);


-- Calcular o total dos itens do pedido 1
SELECT SUM(subtotal) AS Total FROM tab_itens_pedido WHERE id_pedido = 1;

-- Calcular o total dos itens do pedido 2
SELECT SUM(subtotal) AS Total FROM tab_itens_pedido WHERE id_pedido = 2;

-- Altere os dois registros na tab_pedidos com o total de cada pedido
UPDATE tab_pedidos SET total = 52.00 WHERE id_pedido = 1;

UPDATE tab_pedidos SET total = 43.30 WHERE id_pedido = 2;

-- Mostre o nome do cliente, o número de seu pedido, os itens que comprou, o valor unitário, a data de compra, a quantidade 
-- comprada, o subtotal e o total da compra

SELECT tab_clientes.nome AS Cliente,
	   tab_pedidos.id_pedido AS Pedido,
	   tab_produtos.nome AS Produto,
	   tab_produtos.preco AS Valor,
	   tab_pedidos.data AS Data,
	   tab_itens_pedido.qtde AS Quantidade,
	   tab_itens_pedido.subtotal AS Subtotal,
	   tab_pedidos.total AS Total
FROM tab_clientes INNER JOIN tab_pedidos
ON tab_clientes.id_cliente = tab_pedidos.id_cliente INNER JOIN tab_itens_pedido
ON tab_itens_pedido.id_pedido = tab_pedidos.id_pedido INNER JOIN tab_produtos
ON tab_produtos.id_produto = tab_itens_pedido.id_produto;
